#version 400

// TODO: Topology, spacing sceme und winding order (counter clock wise) angeben! (layout modifier)
// spacing schemes: fractional_even_spacing, fractional_odd_spacing, equal_spacing -> sucht euch was aus :)
layout(triangles, equal_spacing, ccw) in;

// inputs from the hull shader.
in vec3 hs_out_Position[];
in vec3 hs_out_Normal[];
in vec2 hs_out_TexCoord[];

// output of the domain shader.
out vec3 ds_out_Normal;
out vec2 ds_out_TexCoord;

layout(std140) uniform GlobalMatrices
{
	mat4 Projection;
	mat4 View;
};

layout(std140) uniform TessFactors
{
	float insideTess;
	float outsideTess;
	float alpha;
};

void main()
{
	// TODO: Baryzentrische Interpolation zwischen den drei Eckpunkten durchführen, um den Punkt p im Dreieck zu bestimmen.
	vec3 p1 = gl_TessCoord.x * hs_out_Position[0];
	vec3 p2 = gl_TessCoord.y * hs_out_Position[1];
	vec3 p3 = gl_TessCoord.z * hs_out_Position[2];
	vec3 p = p1 + p2 + p3;
	
	// TODO: Projektion des Punktes p in die Tangentialebenen der Eckpunkte, wiederum baryzentrische Interpolation zwischen den projizierten Punkten ergibt Punkt q.
	vec3 projectedPoints[3];
	for (int i = 0; i < 3; ++i) {
		projectedPoints[i] = p - dot((p - hs_out_Position[i]), hs_out_Normal[i]) * hs_out_Normal[i];
	}

	vec3 q1 = gl_TessCoord.x * projectedPoints[0];
    vec3 q2 = gl_TessCoord.y * projectedPoints[1];
    vec3 q3 = gl_TessCoord.z * projectedPoints[2];
    vec3 q = q1 + q2 + q3;

	// TODO: Lineare Interpolation zwischen p und q anhand von alpha ergibt den fertigen Punkt x.
	//vec3 x = (1 - alpha) * p + alpha * q;
	vec3 x = mix(p, q, alpha);
    
	// TODO: Baryzentrische Interpolation der Texturkoordinaten und Normalen.
	vec3 n1 = gl_TessCoord.x * hs_out_Normal[0];
	vec3 n2 = gl_TessCoord.y * hs_out_Normal[1];
	vec3 n3 = gl_TessCoord.z * hs_out_Normal[2];
	vec3 n = n1 + n2 + n3;
	normalize(n);

	vec2 t1 = gl_TessCoord.x * hs_out_TexCoord[0];
    vec2 t2 = gl_TessCoord.y * hs_out_TexCoord[1];
    vec2 t3 = gl_TessCoord.z * hs_out_TexCoord[2];
    ds_out_TexCoord = t1 + t2 + t3;

	// TODO: Normale in den View Space transformieren.
	ds_out_Normal = (View * vec4(n, 0)).xyz;
	
	// TODO: Punkt x in den Clipping Space transformieren und rausreichen.
	gl_Position = Projection * View * vec4(x, 1);
}
