// Tesselation Evaluation Shader = Domain Shader

#version 400

// TODO: Topology, spacing sceme und winding order (counter clock wise) angeben! (layout modifier)
// spacing schemes: fractional_even_spacing, fractional_odd_spacing, equal_spacing -> sucht euch was aus :)
layout(triangles, equal_spacing, ccw) in;

// inputs from the hull shader.
in vec3 hs_out_Position[];
in vec3 hs_out_Normal[];
in vec2 hs_out_TexCoord[];

// output of the domain shader.
out vec3 ds_out_Normal;
out vec2 ds_out_TexCoord;

layout(std140) uniform GlobalMatrices
{
	mat4 Projection;
	mat4 View;
};

layout(std140) uniform TessFactors
{
	float insideTess;
	float outsideTess;
	float alpha;
};

void main()
{
	// TODO: Baryzentrische Interpolation zwischen den drei Eckpunkten durchführen, um den Punkt p im Dreieck zu bestimmen.
	// lineare Interpolation mit baryzentrischen Koordinaten im Dreieck mit Formel:
	// interPolierterPunkt = Dreieckspunkt1 * baryKoord.x + Dreieckspunkt2 * baryKoord.y + Dreieckspunkt3 * baryKoord.z
	// gl_TessCoord bringt baryzentrische Koordinaten

	vec3 p; // zu berechnender Punkt
	vec3 uvw = gl_TessCoord; // Benennung wie in Vorlesung
	p = hs_out_Position[0]*uvw.x + hs_out_Position[1]*uvw.y + hs_out_Position[2]*uvw.z;

	// DEBUG: Tranformation in Clipping Space
	//gl_Position = Projection * View * vec4(p,1);

	// TODO: Projektion des Punktes p in die Tangentialebenen der Eckpunkte, wiederum baryzentrische Interpolation zwischen den projizierten Punkten ergibt Punkt q.
	// Projektion mit der Formel aus dem Paper: Projektion(p) = p - (Transponierte(p - Eckpunkti) * normalei) normalei

	vec3 p0 = p - dot((p-hs_out_Position[0]),hs_out_Normal[0]) * hs_out_Normal[0];
	vec3 p1 = p - dot((p-hs_out_Position[1]),hs_out_Normal[1]) * hs_out_Normal[1];
	vec3 p2 = p - dot((p-hs_out_Position[2]),hs_out_Normal[2]) * hs_out_Normal[2];

	// Punkt q aus baryzentrischer Interpolation zwischen p0,p1&p2
	vec3 q = p0*uvw.x + p1*uvw.y + p2*uvw.z;

	// TODO: Lineare Interpolation zwischen p und q anhand von alpha ergibt den fertigen Punkt x.
	// Formel aus dem Paper: x = (1-alpha)*p + alpha*(u,v,w)* (p1, p2, p3)
	//vec3 x = (1-alpha) * p + * (alpha*uvw) * transpose(mat3(p0,p1,p2)); // klappt nicht

	vec3 x = mix(p,q, alpha); // mix = lineare Interpolation
    
	// TODO: Baryzentrische Interpolation der Texturkoordinaten und Normalen.

	ds_out_TexCoord = hs_out_TexCoord[0]*uvw.x + hs_out_TexCoord[1]*uvw.y + hs_out_TexCoord[2]*uvw.z;
	ds_out_Normal = hs_out_Normal[0]*uvw.x + hs_out_Normal[1]*uvw.y + hs_out_Normal[2]*uvw.z;
	
	// TODO: Normale in den View Space transformieren.
	vec4 viewNormal = View * vec4(ds_out_Normal,0);
	ds_out_Normal = viewNormal.xyz;
	
	// TODO: Punkt x in den Clipping Space transformieren und rausreichen.

	gl_Position = Projection * View * vec4(x,1);
}